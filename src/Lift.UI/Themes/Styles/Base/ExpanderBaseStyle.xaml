<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:interactivity="clr-namespace:Lift.UI.Interactivity"
                    xmlns:converter="clr-namespace:Lift.UI.Tools.Converter"
                    xmlns:o="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:langs="clr-namespace:Lift.UI.Properties.Langs" xmlns:liftui="clr-namespace:Lift.UI.Controls"
                    xmlns:tools="clr-namespace:Lift.UI.Tools" xmlns:ex="clr-namespace:Lift.UI.Tools.Extension"
                    xmlns:conv="clr-namespace:Lift.UI.Tools.Converter"
                    xmlns:lang="clr-namespace:Lift.UI.Properties.Langs" xmlns:local="clr-namespace:Lift.UI.Controls"
                    xmlns:primitives="clr-namespace:Microsoft.Windows.Controls.Primitives"
                    xmlns:shapes="clr-namespace:Lift.UI.Expression.Shapes">

    <ControlTemplate x:Key="ExpanderLeftTemplate" TargetType="Expander">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <ToggleButton x:Name="ToggleButton" Grid.Column="1"
                          liftui:BorderElement.CornerRadius="{Binding Path=(liftui:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}"
                          VerticalAlignment="Stretch" VerticalContentAlignment="Stretch" Focusable="False"
                          Padding="0,0,0,10" BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                          Foreground="{TemplateBinding Foreground}"
                          IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          MinWidth="{TemplateBinding MinWidth}" Style="{StaticResource ToggleButtonCustom}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="30" />
                    </Grid.ColumnDefinitions>
                    <Grid.LayoutTransform>
                        <TransformGroup>
                            <RotateTransform Angle="-90" />
                        </TransformGroup>
                    </Grid.LayoutTransform>
                    <ContentPresenter ContentSource="Header"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    <Path Name="PathArrow" IsHitTestVisible="False" Grid.Column="1" Stretch="Uniform"
                          Fill="{TemplateBinding Foreground}" Data="{StaticResource UpGeometry}" Width="12"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="Center" />
                </Grid>
            </ToggleButton>
            <ContentPresenter Name="ExpandSite" Visibility="Collapsed" Grid.Column="0" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="true">
                <Setter Property="liftui:BorderElement.CornerRadius" TargetName="ToggleButton"
                        Value="{Binding Path=(liftui:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='0,1,1,0'}" />
                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible" />
                <Setter Property="Data" TargetName="PathArrow" Value="{StaticResource DownGeometry}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value=".4" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ExpanderUpTemplate" TargetType="Expander">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ToggleButton x:Name="ToggleButton" Grid.Row="1"
                          liftui:BorderElement.CornerRadius="{Binding Path=(liftui:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}"
                          HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" Focusable="False"
                          Padding="10,0,0,0" BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                          Foreground="{TemplateBinding Foreground}"
                          IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          MinHeight="{TemplateBinding MinHeight}" Style="{StaticResource ToggleButtonCustom}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="30" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter ContentSource="Header"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    <Path Name="PathArrow" IsHitTestVisible="False" Grid.Column="1" Stretch="Uniform"
                          Fill="{TemplateBinding Foreground}" Data="{StaticResource UpGeometry}" Width="12"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="Center" />
                </Grid>
            </ToggleButton>
            <ContentPresenter Name="ExpandSite" Visibility="Collapsed" Grid.Row="0" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="true">
                <Setter Property="liftui:BorderElement.CornerRadius" TargetName="ToggleButton"
                        Value="{Binding Path=(liftui:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='0,0,1,1'}" />
                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible" />
                <Setter Property="Data" TargetName="PathArrow" Value="{StaticResource DownGeometry}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value=".4" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ExpanderRightTemplate" TargetType="Expander">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <ToggleButton x:Name="ToggleButton"
                          liftui:BorderElement.CornerRadius="{Binding Path=(liftui:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}"
                          VerticalAlignment="Stretch" VerticalContentAlignment="Stretch" Focusable="False"
                          Padding="0,0,0,10" BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                          Foreground="{TemplateBinding Foreground}"
                          IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          MinWidth="{TemplateBinding MinWidth}" Style="{StaticResource ToggleButtonCustom}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="30" />
                    </Grid.ColumnDefinitions>
                    <Grid.LayoutTransform>
                        <TransformGroup>
                            <RotateTransform Angle="-90" />
                        </TransformGroup>
                    </Grid.LayoutTransform>
                    <ContentPresenter ContentSource="Header"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    <Path Name="PathArrow" IsHitTestVisible="False" Grid.Column="1" Stretch="Uniform"
                          Fill="{TemplateBinding Foreground}" Data="{StaticResource DownGeometry}" Width="12"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="Center" />
                </Grid>
            </ToggleButton>
            <ContentPresenter Name="ExpandSite" Visibility="Collapsed" Grid.Column="1" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="true">
                <Setter Property="liftui:BorderElement.CornerRadius" TargetName="ToggleButton"
                        Value="{Binding Path=(liftui:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='1,0,0,1'}" />
                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible" />
                <Setter Property="Data" TargetName="PathArrow" Value="{StaticResource UpGeometry}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value=".4" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ExpanderDownTemplate" TargetType="Expander">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <ToggleButton x:Name="ToggleButton"
                          liftui:BorderElement.CornerRadius="{Binding Path=(liftui:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}"
                          HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" Focusable="False"
                          Padding="10,0,0,0" BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                          Foreground="{TemplateBinding Foreground}"
                          IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          MinHeight="{TemplateBinding MinHeight}" Style="{StaticResource ToggleButtonCustom}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="30" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter ContentSource="Header"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    <Path Name="PathArrow" IsHitTestVisible="False" Grid.Column="1" Stretch="Uniform"
                          Fill="{TemplateBinding Foreground}" Data="{StaticResource DownGeometry}" Width="12"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="Center" />
                </Grid>
            </ToggleButton>
            <ContentPresenter Name="ExpandSite" Visibility="Collapsed" Grid.Row="1" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="true">
                <Setter Property="liftui:BorderElement.CornerRadius" TargetName="ToggleButton"
                        Value="{Binding Path=(liftui:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='1,1,0,0'}" />
                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible" />
                <Setter Property="Data" TargetName="PathArrow" Value="{StaticResource UpGeometry}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value=".4" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ExpanderBaseStyle" TargetType="Expander">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="MinWidth" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="liftui:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Template" Value="{StaticResource ExpanderDownTemplate}" />
        <Style.Triggers>
            <Trigger Property="ExpandDirection" Value="Left">
                <Setter Property="Template" Value="{StaticResource ExpanderLeftTemplate}" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Up">
                <Setter Property="Template" Value="{StaticResource ExpanderUpTemplate}" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Right">
                <Setter Property="Template" Value="{StaticResource ExpanderRightTemplate}" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>
